using static Microsoft.Maui.ApplicationModel.Permissions;
using System.Diagnostics;
using System.Reflection;
using ChatGptNet;
using ChatGptNet.Models;
using MySql.Data.MySqlClient;
using System.Security.Cryptography.X509Certificates;
using System.Windows.Forms;
using MySqlX.XDevAPI;
using Windows.ApplicationModel.VoiceCommands;
using System.Security.Cryptography;

namespace NourishNaviGit;
public partial class GenerationPage : ContentPage
{
    
    
    // according to tutorial: initialising client stuff should happen outside of the page method

    //initialise sql connection object


    private IChatGptClient _chatGptClient;
    private void GenPage_Loaded(object sender, EventArgs e)
    {
        _chatGptClient = Handler.MauiContext.Services.GetService<IChatGptClient>();
    }
    private async void OnDeclineButton_Clicked(object sender, EventArgs e)
    {
        
        string connectionstring = "Server=localhost; Port=3306;Database=test;user=root;password=NourishNavi;";
        try
        {
            var myconnection = new MySql.Data.MySqlClient.MySqlConnection(connectionstring);
            myconnection.Open();
            alertTest.Text = "Connected successfully!";

            // basic write operation attempt here, using https://mysqlconnector.net/tutorials/basic-api/
            var cmd = new MySqlCommand();
            cmd.Connection = myconnection;

            cmd.CommandText = "INSERT INTO users (username) VALUES (@p)";
            // you can use this to mask a certain value into @p
            cmd.Parameters.AddWithValue("p", "Testing innsert variable here");
            await cmd.ExecuteNonQueryAsync();
        }
        catch (MySql.Data.MySqlClient.MySqlException ex)
        {
            alertTest.Text=ex.Message;
        }  
    }
    public GenerationPage(string generatedPrompt)
    {
        InitializeComponent();

        // when this page is loaded, genPage_loaded, which starts up client.
        this.Loaded += GenPage_Loaded;

        //// initiates chatgptclient


        // Display the generated prompt -- CASSIE
        GeneratedPromptTextBlock.Text = generatedPrompt;


        // storedPrompt will = prompt generated by previous page. maybe store in database and call from there?
        // or is there a POST method or something similar?

        // test prompt value - in practice will retrieve string of full prompt and pass into functions here for chatgptnet

        // retrieves chatgpt response

        async void GetRecommendation(string promptFull)
        {

            // hopefully research more on exactly what this block is, tutorial suggests its important but doesnt specify what it does.
            if (_sessionGuid == Guid.Empty)
            {
                _sessionGuid = Guid.NewGuid();
            }

            // ask chatgpt using the full prompt generated by PromptGenerator
            ChatGptResponse response = await _chatGptClient.AskAsync(_sessionGuid,
                                        promptFull);
            
        }


    }
    private Guid _sessionGuid = Guid.Empty;
}