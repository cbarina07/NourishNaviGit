using static Microsoft.Maui.ApplicationModel.Permissions;
using System.Diagnostics;
using System.Reflection;
using ChatGptNet;
using ChatGptNet.Models;
using Azure;
using MySql.Data.MySqlClient;


namespace NourishNaviGit;

// THIS IS THE POSSIBLE CODE LAYOUT FOR DATABASE
//    {
//        string connectionstring = "Server=localhost; Port=3306;Database=test;user=root;password=NourishNavi;";
//        try
//        {
//            var myconnection = new MySql.Data.MySqlClient.MySqlConnection(connectionstring);
//myconnection.Open();
//            alertTest.Text = "Connected successfully!";

//            // basic write operation attempt here, using https://mysqlconnector.net/tutorials/basic-api/
//            var cmd = new MySqlCommand();
//cmd.Connection = myconnection;

//            cmd.CommandText = "INSERT INTO users (username) VALUES (@p)";
//            // you can use this to mask a certain value into @p
//            cmd.Parameters.AddWithValue("p", "Testing innsert variable here");
//            await cmd.ExecuteNonQueryAsync();
//        }
//        catch (MySql.Data.MySqlClient.MySqlException ex)
//        {
//    alertTest.Text = ex.Message;
//}  
//    }


public partial class GenerationPage : ContentPage
{
    // according to tutorial: initialising client stuff should happen outside of the page method
    private IChatGptClient _chatGptClient;

    public GenerationPage(string generatedPrompt)
    {
        InitializeComponent();

        // when this page is loaded, genPage_loaded, which starts up client.
        this.Loaded += GenPage_Loaded;

        //// initiates chatgptclient

        // Display the generated prompt -- CASSIE
        GeneratedPromptTextBlock.Text = generatedPrompt;

    }

    private void InitializeChatGptClient()
    {
        _chatGptClient = Handler.MauiContext.Services.GetService<IChatGptClient>();
    }

    private void GenPage_Loaded(object sender, EventArgs e)
    {
        InitializeChatGptClient(); // Initialize the chat client

        if (_chatGptClient == null)
        {
            // Handle the case where _chatGptClient is not initialized
            client.Text = "Chat client not initialized.";
        }

    }


    // storedPrompt will = prompt generated by previous page. maybe store in database and call from there?
    // or is there a POST method or something similar?

    // test prompt value - in practice will retrieve string of full prompt and pass into functions here for chatgptnet

    // retrieves chatgpt response

    private async Task<string> GetRecommendation(string promptFull)
    {

        // hopefully research more on exactly what this block is, tutorial suggests its important but doesnt specify what it does.
        if (_sessionGuid == Guid.Empty)
        {
            _sessionGuid = Guid.NewGuid();
        }

        // ask chatgpt using the full prompt generated by PromptGenerator
        ChatGptResponse response = await _chatGptClient.AskAsync(_sessionGuid, promptFull);


        // Return the response content as a string
        return response.GetContent();
    }

    private void OnDeclineButton_Clicked(object sender, EventArgs e)
    {
        // Hide the label with the generated prompt
        GeneratedPromptTextBlock.IsVisible = false;

        // Show the Entry for editing the prompt
        EditedPromptEditor.IsVisible = true;

        // Set the text of the Entry to the generated prompt
        EditedPromptEditor.Text = GeneratedPromptTextBlock.Text;

        // Optionally, set focus on the Entry so the user can start editing immediately
        EditedPromptEditor.Focus();
    }

    protected async override void OnAppearing()
    {
        base.OnAppearing();
        await Task.Delay(100);
        loading.IsAnimationPlaying = true;
    }

    private async void OnConfirmButton_Clicked(object sender, EventArgs e)
    {
        string promptToUse = EditedPromptEditor.IsVisible ? EditedPromptEditor.Text : GeneratedPromptTextBlock.Text + "Please write me a meal plan for each day of the next week and return to only the titles of each meal. Then list my given diet, dislikes and allergies (if any have been specified) on a new line at the end";
            //"first, and then afterwards, a list of ingredients needed-- should be structured like: Day 1: Name of Meal(s)       Ingredients: Alphabetical ist of all ingredients ";
        // Will use the edited prompt if visible, otherwise will use the generated prompt.
        Decline.IsVisible = false;
        Confirm.Text = "Creating your meal plan...";

        loading.IsVisible= true;

        //// Call the method to get the AI response here
        string aiResponse = await GetRecommendation(promptToUse);

        // Navigate to the AIPage and pass the AI response as a parameter
        await Navigation.PushAsync(new AIPage(aiResponse));
        
    }

    private Guid _sessionGuid = Guid.Empty;


}